{"remainingRequest":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/src/components/Fetch.vue?vue&type=style&index=0&id=b5f5f48c&scoped=true&lang=css&","dependencies":[{"path":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/src/components/Fetch.vue","mtime":1572735408729},{"path":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nightgust/Google Drive/МГТУ/skillfactory/html/module_C_4/c_web2/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdGhlYWQgewogIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKfQoK"},{"version":3,"sources":["Fetch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AACA;AACA","file":"Fetch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1>Todos</h1>\n    <p>{{ msg }}</p>\n    <table>\n      <thead>\n      <tr>\n        <th>Uid</th>\n        <th>Описание</th>\n        <th>Выполнена?</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n        <td>1</td>\n        <td>Съесть еду</td>\n        <td>Нет</td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\n// импортируем библиотеку для работы с http запросами\nimport axios from 'axios';\n\nconst dataURL = 'http://localhost:5000/api/tasks/';\n\nexport default {\n  name: 'Fetch',\n  data() {\n    return {\n      msg: 'Запрос ещё не прошёл', // значение при загрузке компонента\n    };\n  },\n  // вынесли логику после сreated в методы чтобы не загромомждать\n  methods: {\n    getMessage() {\n      axios.get(dataURL)\n        .then((response) => {\n          console.table(response.data);\n          this.msg = response.data.message;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n  },\n  // определяем поведение компонента при загрузке с помощью created\n  created() {\n    this.getMessage();\n  },\n};\n</script>\n\n<style scoped>\nthead {\n  align-content: center;\n}\n\n</style>\n"]}]}